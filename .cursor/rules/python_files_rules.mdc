---
description:
globs: **/*.py
alwaysApply: false
---
# 游닆 Reglas de Python
Este documento define los est치ndares de desarrollo y buenas pr치cticas de python. Su prop칩sito es asegurar consistencia, calidad y mantenibilidad de c칩digo de python, a trav칠s de gu칤as claras para el proceso de desarrollo.

## 游꿢 Principios de C칩digo

- Cumplir con el est치ndar **PEP8** con longitud m치xima de l칤nea de 79 caracteres.
- Usar **4 espacios** para indentaci칩n (no tabs).
- **Imports relativos** (`from ..models.user import User`), evitar imports absolutos.
- Los imports deben estar agrupados y ordenados (est치ndar de biblioteca, terceros, locales).
- Usar **comillas dobles** para strings (seg칰n configuraci칩n en ruff).
- **Usar type hints** en todas las funciones y m칠todos para mejorar la mantenibilidad y detectar errores temprano (compatible con mypy).
- Evitar usar el tipo 'Any'; ser lo m치s espec칤fico posible con los tipos.
- Seguir patrones adecuados de manejo de excepciones; evitar usar `except` sin tipo o `except Exception`.
- Usar **loguru** para logging.
- Mantener docstrings claros para funciones complejas, clases y m칩dulos; el c칩digo simple autoexplicativo no requiere docstrings.
- Nomenclatura:
  - Funciones y variables: **snake_case**
  - Clases: **PascalCase**
  - Constantes: **UPPERCASE_WITH_UNDERSCORES**

---

## 游닍 Manejo de Entradas y Salidas

- Siempre usar **modelos de Pydantic v2** para validar entradas y salidas:
  - Utilizar tipos nativos y validadores integrados de Pydantic o paquetes como `pydantic_extra_types`.
  - Evitar crear validadores personalizados para casos que ya est치n cubiertos por tipos existentes.
  - Para datos derivados, preferir **propiedades calculadas** o **validadores de modelo**.
  - Incluir validaciones de campo completas.
  - Incluir ejemplos solo donde sean 칰tiles.
- Evitar el uso de **diccionarios brutos** (`dict`) para representar o devolver datos estructurados.
- **Integraci칩n con frameworks**:
  - En **FastAPI**, preferir el uso de anotaciones de tipo de retorno:
    ```python
    @app.post('/cars')
    async def create_car(req: CarRequest) -> List[Car]:
       ...
    ```
  - Evitar validaciones manuales cuando el framework puede manejarlas autom치ticamente como: (coordenadas, emails, URLs, fechas, validaciones de rangos de numeros, sanitizaci칩n de cadenas, etc).

### Ejemplo: Uso correcto de tipos especializados
```python
# INCORRECTO: Validador personalizado innecesario
from pydantic import BaseModel, field_validator

class LocationValidator(BaseModel):
    location: str

    @field_validator('location')
    def validate_location(cls, value: str) -> str:
        values = value.split(',')
        if len(values) != 3:
            raise ValueError('Must provide exactly 3 values for location')
        return value

# CORRECTO: Uso de tipo especializado existente
from pydantic import BaseModel
from pydantic_extra_types.coordinate import Coordinate

class LocationValidator(BaseModel):
    location: Coordinate  # Maneja autom치ticamente la validaci칩n
```
