---
description:
globs: *
alwaysApply: false
---
# üìú Reglas Generales
Este documento define los est√°ndares de desarrollo y buenas pr√°cticas para el desarrollo en este repositorio. Su prop√≥sito es asegurar consistencia, calidad y mantenibilidad del c√≥digo  a trav√©s de gu√≠as claras para todos los desarrolladores del proyecto.

## üõ† Estructura de Proyecto

- **lib/**: Servicios, integraciones y l√≥gica compartida.
- **models/**: Modelos de MongoEngine. Toda operaci√≥n de negocio debe implementarse en m√©todos o propiedades del modelo.
- **resources/**: Endpoints expuestos de API. Mantenerlos simples y delegar la l√≥gica a `lib` o `models`.
  - Pueden contener l√≥gica de validaci√≥n extra que no puede hacerse a nivel de Pydantic validators, como verificar que el auto de un usuario exista y retornar c√≥digos de error acordes al contexto de validaci√≥n.
  - Los nombres de archivos deben ser en plural y la ruta de los endpoints debe coincidir con el nombre del archivo. Por ejemplo, `cars.py` debe contener rutas como:
    - `POST /cars`
    - `GET /cars`
    - `GET /cars/:car_id`
    - `PATCH /cars/:car_id`
- **types.py**: Debe contener enums, modelos Pydantic para validaci√≥n (requests y responses).
  - Las propiedades de enums deben estar en lowercase y snake_case.
  - Los nombres de las propiedades deben coincidir con sus valores.
- **exc.py**: Debe contener excepciones personalizadas que sean utilizadas en el codebase.
- **tasks/**: Background tasks o procesos batch as√≠ncronos.
- **tests/**: Contiene todas las pruebas unitarias del proyecto.
- **evals/**: Contiene evaluaciones y pruebas de rendimiento para servicios de LLM.
  - **evals_data/**: Archivos JSON con datfos de entrada y salida esperada para evaluaciones.
  - Fuera de la carpeta `evals_data` se encuentran los tests que eval√∫an los datos de las evaluaciones.
- **config.py**: Definici√≥n y validaci√≥n de variables de entorno.
- **scripts/**: Scripts auxiliares para el proyecto.
- **Makefile**: Definici√≥n de tareas y comandos para el proyecto.

---

## üéØ Principios de C√≥digo

- Aplicar **programaci√≥n funcional** cuando sea posible (funciones puras, minimizar efectos secundarios).
- Cada funci√≥n, clase o archivo debe seguir el principio de **responsabilidad √∫nica**.
- **Nombres descriptivos** en variables, funciones y clases (ejemplo: `user_info` en lugar de `ui`).
- **Reutilizar c√≥digo existente** antes de crear nuevas funciones.
- **No duplicar l√≥gica** que ya existe en `lib`, `models` o `tasks`.
- **Preferir bibliotecas existentes** para funcionalidades comunes en lugar de implementar soluciones propias (ejemplo: usar `emoji` para manipular emojis en texto en lugar de escribir expresiones regulares personalizadas).

---

## üñãÔ∏è Estilo de C√≥digo

- **El estilo de c√≥digo debe seguir estrictamente la configuraci√≥n definida en `pyproject.toml` o `ruff.toml`**.
- **Formatos autom√°ticos**:
  - Usar `Ruff` y `Black` mediante `make format`.
  - Se aplicar√°n reglas de estilo, orden de imports, y trailing commas conforme a la configuraci√≥n.
- **Correcciones manuales de estilo no son necesarias**: ejecutar `make format` o `pre-commit` para corregir.

---

## üõ°Ô∏è Variables de Entorno

- Todas las variables deben estar definidas en `config.py`.
- Si se agrega una nueva variable obligatoria:
  - Agregarla tambi√©n a `.env.example`.
  - Asegurar validaci√≥n adecuada en el c√≥digo.
- Las propiedades de la clase Config deben estar en snake_case y lowercase, aunque en el archivo `.env.template` est√©n en may√∫sculas.

---

## üß™ Gu√≠a de Pruebas

- Todas las funciones de negocio deben tener **pruebas unitarias**.
- Usar `pytest`, `pytest-asyncio`, `pytest-cov`.
- Mantener **alta cobertura** en componentes cr√≠ticos.
- Ejecutar pruebas mediante `make test` o `make testcov`.
- **No escribir tests** que solo validen el funcionamiento de validadores nativos de Pydantic.
- Los tests deben enfocarse en la l√≥gica propia del negocio, no en revalidar funcionalidades del framework.

---

## üìå Aplicaci√≥n obligatoria

- Reemplazar validadores personalizados cuando exista una alternativa integrada o externa v√°lida.
- Eliminar tests innecesarios que solo verifiquen validaciones est√°ndar de Pydantic.
- Bloquear Pull Requests que introduzcan validadores redundantes o innecesarios cuando exista un tipo adecuado.

---
